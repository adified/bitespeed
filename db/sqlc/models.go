// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type LinkPrecedence string

const (
	LinkPrecedencePrimary   LinkPrecedence = "primary"
	LinkPrecedenceSecondary LinkPrecedence = "secondary"
)

func (e *LinkPrecedence) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LinkPrecedence(s)
	case string:
		*e = LinkPrecedence(s)
	default:
		return fmt.Errorf("unsupported scan type for LinkPrecedence: %T", src)
	}
	return nil
}

type NullLinkPrecedence struct {
	LinkPrecedence LinkPrecedence `json:"link_precedence"`
	Valid          bool           `json:"valid"` // Valid is true if LinkPrecedence is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLinkPrecedence) Scan(value interface{}) error {
	if value == nil {
		ns.LinkPrecedence, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LinkPrecedence.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLinkPrecedence) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LinkPrecedence), nil
}

type User struct {
	ID             int64              `json:"id"`
	PhoneNumber    string             `json:"phone_number"`
	Email          string             `json:"email"`
	LinkedID       pgtype.Int8        `json:"linked_id"`
	LinkPrecedence LinkPrecedence     `json:"link_precedence"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}
