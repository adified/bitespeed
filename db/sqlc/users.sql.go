// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPrimaryUser = `-- name: CreatePrimaryUser :one
INSERT INTO users (
  email,
  phone_number,
  link_precedence
) VALUES (
  $1, $2, 'primary'
)
RETURNING id, phone_number, email, linked_id, link_precedence, created_at, updated_at, deleted_at
`

type CreatePrimaryUserParams struct {
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreatePrimaryUser(ctx context.Context, arg CreatePrimaryUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createPrimaryUser, arg.Email, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.LinkedID,
		&i.LinkPrecedence,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createSecondaryUser = `-- name: CreateSecondaryUser :one
INSERT INTO users (
  email,
  phone_number,
  linked_id,
  link_precedence
) VALUES (
  $1, $2, $3, 'secondary'
)
RETURNING id, phone_number, email, linked_id, link_precedence, created_at, updated_at, deleted_at
`

type CreateSecondaryUserParams struct {
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	LinkedID    pgtype.Int8 `json:"linked_id"`
}

func (q *Queries) CreateSecondaryUser(ctx context.Context, arg CreateSecondaryUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createSecondaryUser, arg.Email, arg.PhoneNumber, arg.LinkedID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.LinkedID,
		&i.LinkPrecedence,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUsersByEmailOrPhone = `-- name: FindUsersByEmailOrPhone :many
SELECT id, phone_number, email, linked_id, link_precedence, created_at, updated_at, deleted_at FROM users
WHERE 
  (email = $1 AND email IS NOT NULL AND $1 <> '') 
  OR 
  (phone_number = $2 AND phone_number IS NOT NULL AND $2 <> '')
ORDER BY created_at ASC
`

type FindUsersByEmailOrPhoneParams struct {
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) FindUsersByEmailOrPhone(ctx context.Context, arg FindUsersByEmailOrPhoneParams) ([]User, error) {
	rows, err := q.db.Query(ctx, findUsersByEmailOrPhone, arg.Email, arg.PhoneNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Email,
			&i.LinkedID,
			&i.LinkPrecedence,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phone_number, email, linked_id, link_precedence, created_at, updated_at, deleted_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Email,
		&i.LinkedID,
		&i.LinkPrecedence,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsersByPrimaryID = `-- name: GetUsersByPrimaryID :many
SELECT id, phone_number, email, linked_id, link_precedence, created_at, updated_at, deleted_at FROM users
WHERE id = $1 OR linked_id = $1
ORDER BY link_precedence ASC, created_at ASC
`

func (q *Queries) GetUsersByPrimaryID(ctx context.Context, id int64) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByPrimaryID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Email,
			&i.LinkedID,
			&i.LinkPrecedence,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserToSecondary = `-- name: UpdateUserToSecondary :exec
UPDATE users
SET 
  linked_id = $1,
  link_precedence = 'secondary',
  updated_at = NOW()
WHERE id = $2
`

type UpdateUserToSecondaryParams struct {
	LinkedID pgtype.Int8 `json:"linked_id"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateUserToSecondary(ctx context.Context, arg UpdateUserToSecondaryParams) error {
	_, err := q.db.Exec(ctx, updateUserToSecondary, arg.LinkedID, arg.ID)
	return err
}
